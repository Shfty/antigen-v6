At draw call time, 1 instance = 1 line
Therefore, need to indirect manually
Instance index -> mesh index -> vertex index

Example:
Rendering ABBCCC

A is mesh 0
B is mesh 1
C is mesh 2

A has 6 vertices, 4 lines
B has 8 vertices, 8 lines
C has 8 vertices, 7 lines

Vertices 0..6 represent mesh 0
Vertices 6..14 represent mesh 1
Vertices 14..22 represent mesh 2

Indices 0..8 represent mesh 0
Indices 8..24 represent mesh 1
Indices 24..38 represent mesh 2

Instances 0..4 will use mesh 0, vertices 0..6, indices 0..8
Instances 4..20 will use mesh 1, vertices 6..14, indices 8..24
Instances 20..27 will use mesh 2, vertices 14..22, indices 24..38

Mesh0 {
    vertex_offset: 0,
    index_offset: 0,
    vertex_count: 6,
    index_count: 8,
}

Mesh1 {
    vertex_offset: 6,
    index_offset: 8,
    vertex_count: 8,
    index_count: 16,
}

Mesh2 {
    vertex_offset: 14,
    index_offset: 24,
    vertex_count: 8,
    index_count: 14,
}

Entity0 {
    mesh: 0, // A
    pos: (0, 0, 0),
}

Entity1 {
    mesh: 1, // B
    pos: (1, 0, 0),
}

Entity2 {
    mesh: 1, // B
    pos: (2, 0, 0),
}

Entity3 {
    mesh: 2, // C
    pos: (3, 0, 0),
}

Entity4 {
    mesh: 2, // C
    pos: (4, 0, 0),
}

Entity5 {
    mesh: 2, // C
    pos: (5, 0, 0),
}

LineInstance {
    entity_id: usize,
    line_index: usize,
}

Line vertex shader pseudocode:

storage_buffer<Vertex> mesh_vertices
storage_buffer<u16> line_indices
storage_buffer<Mesh> meshes
storage_buffer<Entity> entities

storage_buffer<LineInstance> line_instances

foreach vertex(instance_id) {
    line_instance = line_instances[instance_id];
    entity = entities[line_instance.entity_id];
    mesh = meshes[entity.mesh];

    base_index = mesh.index_offset + line_instance.line_index * 2;
    i0 = line_indices[base_index];
    i1 = line_indices[base_index + 1];

    base_vertex = mesh.vertex_offset
    v0 = mesh_vertices[base_vertex + i0] + entity.pos;
    v1 = mesh_vertices[base_vertex + i1] + entity.pos;

    // Use v0 and v1 to position line mesh verts
    ...
}
